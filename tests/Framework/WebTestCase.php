<?php

namespace Tests\Framework;



use Throwable;
use Doctrine\ORM\Tools\SchemaTool;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase as BaseTestCase;

class WebTestCase extends BaseTestCase
{
    protected $client;

    protected $container;

    protected $schemaTool;

    protected $em;

    protected $crawler;

    private $response;

    private $responseContent;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient();
        $this->container = $this->client->getContainer();
        $this->em = $this->container->get('doctrine.orm.default_entity_manager');

        /*
            static $metadatas;
            if(!isset($metadatas))
            {
                $metadatas = $this->em->getMetadataFactory()->getAllMetadata();
            }

            $this->schemaTool = new SchemaTool($this->em);
            $this->schemaTool->dropDatabase();

            if (empty($metadatas))
            {
                $this->schemaTool->createSchema($metadatas);
            }
        */
        // Autre facon de gerer la bdd
        $this->em->beginTransaction();
        $this->em->getConnection()->setAutoCommit(false);
    }

    protected function visit($url)
    {
        $this->crawler = $this->client->request('GET', $url);

        $this->response = $this->client->getResponse();
        $this->responseContent = $this->response->getContent();
        return $this;
    }


    protected function seeText($text)
    {
        $this->assertContains($text, $this->responseContent);
        return $this;
    }

    protected function assertResponseOk()
    {
        $this->assertEquals(200, $this->response->getStatusCode());
        return $this;
    }


    protected function onNotSuccessfulTest(Throwable $t)
    {
        if ($this->crawler && $this->crawler->filter('.exception-message')->count() > 0)
        {
            $throwableClass = get_class($t);

            $message =  $this->crawler->filter('.exception-message')->eq(0)->text();

            throw new $throwableClass($t->getMessage() .' | '. $message);
        }
        throw $t;

    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        if($this->em != null)
        {
            $this->em->rollBack();
        }
    }

}